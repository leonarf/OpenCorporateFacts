{% block body %}
<div id="mynetwork"></div>
  {% block javascripts %}
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" rel="stylesheet" type="text/css" />
    <style type="text/css">
        #mynetwork {
            height: 800px;
            border: 1px solid lightgray;
        }
    </style>
<script type="text/javascript">
    var nodesData = [ {id: {{ corporate.CompanyNumber }}, label: '{{ corporate.Name }}', fixed : true }];
    var links = [];
    var representantsStreamlined = {"P.Physique" : new Map(), "P. Morale" : new Map()};
    var representantsMap = new Map();
    var denominationMap = new Map();
    var colors = ["#4d4040",
                  "#c36c40",
                  "#95c15a",
                  "#90b6b7",
                  "#7c50ba",
                  "#c35d90"];
    $.get("https://api.cquest.org/company/{{ corporate.CompanyNumber }}",
    function(serverData, status){
        console.log("Response from all of fame:");
        var rncsData;
        if('rncs' in serverData.result[0]){
          rncsData = serverData.result[0].rncs;
        }
        else if(serverData.result.length >= 2 && 'rncs' in serverData.result[1]){
          rncsData = serverData.result[1].rncs;
        }
        else { // No RNCS data :-(
          nodesData.push({id: 1, label: ":-(", color : colors[4]});
          links.push({from: {{ corporate.CompanyNumber }}, to: 1, label: "" });
          nodesData.push({id: 2, label: ":-(", color : colors[4]});
          links.push({from: {{ corporate.CompanyNumber }}, to: 2, label: "" });
          nodesData.push({id: 3, label: "Pas de données RNCS disponibles", color : colors[3]});
          links.push({from: {{ corporate.CompanyNumber }}, to: 3, label: "" });
          rncsData = { representants : []};
        }
        console.log(rncsData.representants);
        for (const representant of rncsData.representants) {
          var nodeId = representant.id_representant;
          var nodeColor = colors[4];
          // Personne physique
          if(["P.Physique", "P. Physique"].includes(representant.type_representant))
          {
            if(representantsStreamlined["P.Physique"].has(representant.id_representant))
            {
              representantsStreamlined["P.Physique"].get(representant.id_representant).push(representant);
            }
            else{
              representantsStreamlined["P.Physique"].set(representant.id_representant, [representant]);
            }
            nodeColor = colors[1];
            nodeLabel = representant.nom_patronyme + " " + representant.prenoms;
          }
          // Personne morale
          else if(representant.type_representant == "P. Morale")
          {
            if(representantsStreamlined["P. Morale"].has(representant.denomination))
            {
              representantsStreamlined["P. Morale"].get(representant.denomination).push(representant);
            }
            else{
              representantsStreamlined["P. Morale"].set(representant.denomination, [representant]);
            }
            nodeLabel = representant.denomination;
          }
          else {
            console.log("undefined :", representant);
          }
          for (var property in representant){
            if (representant[property]===null || ["created_at", "updated_at", "code_greffe", "numero_gestion"].includes(property) ) delete representant[property];
          }
        }

        for (var physique of representantsStreamlined["P.Physique"])
        {
          var representantPhysique = physique[1][0];
          var nodeId = representantPhysique.id_representant;
          var nodeLabel = representantPhysique.nom_patronyme + " " + representantPhysique.prenoms;
          if(representantPhysique.nationalite != null)
          {
             nodeLabel += "\n Nationalité:" + representantPhysique.nationalite;
          }
          else {
            nodeLabel += "\n Pays:" + representantPhysique.adresse_pays;
          }
          var nodeColor = colors[5];
          // Create one node per physical person
          nodesData.push({id: nodeId, label: nodeLabel, title : JSON.stringify(representantPhysique, null, '\u2028'), color : nodeColor});
          for (var rep of physique[1])
          {
            // Create one link per "qualité"
            links.push({from: {{ corporate.CompanyNumber }}, to: nodeId, label: rep.qualite + "\n au " + representantPhysique.date_derniere_modification });
          }
        }

        for (var morale of representantsStreamlined["P. Morale"])
        {
          var nodeId = morale[0];
          var nodeColor = colors[2];
          var nodeLabel = morale[0] + "\n représenté par ";
          if(morale[1][0].siren_pm != null)
          {
             nodeColor = colors[2];
             nodeId = morale[1][0].siren_pm;
          }
          var qualiteMap = new Map();
          for (var rep of morale[1])
          {
            if (qualiteMap.has(rep.qualite))
            {
              qualiteMap.set(rep.qualite, qualiteMap.get(rep.qualite) + 1);
            }
            else{
              qualiteMap.set(rep.qualite, 1);
            }
          }
          for (var qualite of qualiteMap)
          {
            nodeLabel += qualite[1] + " " + qualite[0] + ";";
          }

          nodesData.push({id: nodeId, label: nodeLabel, title : JSON.stringify(morale[1], null, '\u2028'), color : nodeColor});
          links.push({from: {{ corporate.CompanyNumber }}, to: nodeId, label: "" });
        }
        console.log("représentant bien rangé :", representantsStreamlined);
        console.log("node data :", nodesData);

        // create an array with nodes
        var nodes = new vis.DataSet(nodesData);

        // create an array with edges
        var edges = new vis.DataSet(links);

        // create a network
        var container = document.getElementById('mynetwork');
        var data = {
          nodes: nodes,
          edges: edges
        };

        var options = {};
        var network = new vis.Network(container, data, options);

        network.on("doubleClick", function (params) {
            params.event = "[original event]";
            var baseURL = "{{ url('corporate_show', {'siren': corporate.CompanyNumber}) }}";
            var newURL = baseURL.replace(new RegExp("/{{ corporate.CompanyNumber }}$"), "/" + params.nodes[0]);
            window.location.replace(newURL);
        });
      },
      "json");

  {% for corporationsLink in corporate.CorporateShareholders %}
    nodesData.push({id: {{ corporationsLink.OwningCorporate.Id }}, label: '{{ corporationsLink.OwningCorporate.Name }}' });
    links.push({from: {{ corporationsLink.OwningCorporate.Id }}, to: {{ corporationsLink.OwnedCorporate.Id }}, label: '{{corporationsLink.OwningPercentage }}%'  });
  {% endfor %}

  {% for corporationsLink in corporate.shareholdings %}
    nodesData.push( {id: {{ corporationsLink.OwnedCorporate.Id }}, label: '{{ corporationsLink.OwnedCorporate.Name }}' } );
    links.push({from: {{ corporationsLink.OwningCorporate.Id }}, to: {{ corporationsLink.OwnedCorporate.Id }}, label: '{{corporationsLink.OwningPercentage }}%' });
  {% endfor %}

</script>
     {% endblock %}
{% endblock %}
